<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Creators Project" backgroundColor="0xffffff" width="1360" height="768"
	xmlns:textures="com.creatorsproject.ui.textures.*" xmlns:chips="com.creatorsproject.ui.chips.*">

	<mx:Script>
		<![CDATA[
			import com.creatorsproject.ui.MapUI;
			import com.creatorsproject.data.DataConstants;
			import com.creatorsproject.ui.TouchUI;
			import org.papervision3d.core.animation.channel.Channel3D;
			import org.papervision3d.core.controller.AnimationController;
			import org.papervision3d.core.log.event.PaperLoggerEvent;
			import org.papervision3d.core.log.PaperLogger;
			import org.papervision3d.core.math.Number3D;
			import com.creatorsproject.input.events.GestureEvent;
			import com.creatorsproject.input.TouchController;
			import com.creatorsproject.ui.CreatorUI;
			import com.creatorsproject.ui.ScheduleMarker;
			import com.creatorsproject.ui.textures.TextTexture;
			import org.papervision3d.materials.MovieMaterial;
			import com.creatorsproject.ui.textures.TextTexture;
			import org.papervision3d.objects.DisplayObject3D;
			import com.creatorsproject.geom.TileBand;
			import org.papervision3d.core.geom.renderables.Vertex3D;
			import com.creatorsproject.ui.EventUI;
			import com.creatorsproject.data.PartyData;
			import com.creatorsproject.data.EventRoom;
			import com.creatorsproject.data.PartyEvent;
			import com.creatorsproject.ui.ITickable;
			import org.papervision3d.materials.utils.MaterialsList;
			import org.papervision3d.materials.ColorMaterial;
			import org.papervision3d.objects.primitives.Cube;
			import org.papervision3d.cameras.Camera3D;
			import org.papervision3d.scenes.Scene3D;
			import org.papervision3d.render.BasicRenderEngine;
			import org.papervision3d.view.Viewport3D;
			
			// Singletoning!
			public static var instance:main;
		
			// 3D!
			private var _viewport:Viewport3D;
			private var _renderer:BasicRenderEngine;
			private var _scene:Scene3D;
			private var _camera:Camera3D;
			
			// Interaction!
			private var _touchController:TouchController;
			private var _moduleAnchors:Dictionary;
			private var _focusedModule:TouchUI;
			
			// Data!
			private var _partyData:PartyData;
			
			// Interface!
			public static var EVENT_NODE:String = "eventNode";
			public static var CREATOR_NODE:String = "creatorNode";
			public static var MAP_NODE:String = "mapNode";
			private var _eventUI:EventUI;
			private var _creatorUI:CreatorUI;
			private var _mapUI:MapUI;
			
			// ____________________________________________ Application Setup
			
			public function init(isLocal:Boolean = true):void {
				DataConstants.isLocal = isLocal
				initWindow.visible = false;
				initSever();
				
				//animationTest();
			}
			
			private function animationTest():void {
				this.init3D();
				
				var cube:Cube = new Cube(new MaterialsList({all: new ColorMaterial()}), 100, 100, 100);
				_scene.addChild(cube);
			}
			
			public function initSever():void {
				instance = this;
				_partyData = new PartyData();
				_partyData.loadData();
				_partyData.addEventListener(Event.COMPLETE, this.onDataSuccess);
				_partyData.addEventListener(IOErrorEvent.IO_ERROR, this.onPartyDataError);
			}
			
			public function onPartyDataError(event:IOErrorEvent):void {
				
			}
			
			public function onDataSuccess(event:Event):void {
				this.initTouch();
				this.init3D();
				this.initInterface();
			}
			
			public function init3D():void {
				_viewport = new Viewport3D(0, 0, true, true);
				_renderer = new BasicRenderEngine();
				_scene = new Scene3D();
				_camera = new Camera3D(50);
				
				this.backUI.addChild(_viewport);
				this.addEventListener(Event.ENTER_FRAME, this.onRenderTick); 
			}
			
			public function initTouch():void {
				TouchController.me.setup(this.stage, this.clickMatte);
				TouchController.me.addEventListener(GestureEvent.SWIPE_START, onSwipe);
				TouchController.me.addEventListener(GestureEvent.SWIPE, onSwipe);
				TouchController.me.addEventListener(GestureEvent.SWIPE_END, onSwipe);
			}
			
			public function initInterface(event:Event = null):void {
				
				_mapUI = new MapUI(_partyData);
				_scene.addChild(_mapUI);
				setUIPosition(_mapUI, 0);
				
				//_eventUI = new EventUI(_partyData);
				//_scene.addChild(_eventUI);
				
				//_creatorUI = new CreatorUI(_partyData.creators);
				//_scene.addChild(_creatorUI);
				
				// position the UI modules
				
				//_moduleAnchors = new Dictionary();
				//_moduleAnchors[_eventUI] = 0;
				//_moduleAnchors[_creatorUI] = Math.PI / 5;
				//setUIPosition(_eventUI, _moduleAnchors[_eventUI]);
				//setUIPosition(_creatorUI, _moduleAnchors[_creatorUI]);
				
				
				// finally, get the camera into place
				_camera.z = -5000;
				
				//dump();
				//_focusedModule = _eventUI;
			}
			
			private function dump():void {
				var step:Number = Math.PI / 20;
				var mat:ColorMaterial = new ColorMaterial();
				for(var i:int = 0; i < 40; i ++) {
					var cube:Cube = new Cube(new MaterialsList({all: mat}), 50, 50, 50);
					cube.z = -2000 * Math.cos(step * i);
					cube.y = -2000 * Math.sin(step * i);
					_scene.addChild(cube);
				}
			}
			
			private function setUIPosition(ui:DisplayObject3D, theta:Number):void {
				var thetaDeg:Number = theta / Math.PI * 180;
				
				ui.z = -2000 * Math.cos(theta);
				ui.y = -2000 * Math.sin(theta);
				
				ui.rotationX = - (theta / Math.PI * 180);
			}
			
			// ____________________________________________ Rendering and Updating
			
			public function onRenderTick(event:Event):void {
				for each(var t:DisplayObject3D in _scene.children) {
					if(t is ITickable) {
						(t as ITickable).tick();
					}
				}
								
				_renderer.renderScene(_scene, _camera, _viewport);
			}
			
			public function toggleFullscreen():void {
				if(stage.displayState == StageDisplayState.NORMAL) {
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				} else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			// ____________________________________________ Interaction
			
			private function onSwipe(event:GestureEvent):void {
				/*
				if(event.type == GestureEvent.SWIPE) {
					for (var key:Object in _moduleAnchors) {
						if(key != _focusedModule) {
							var currentDelta:Number = Math.abs(_camera.rotationX + _moduleAnchors[_focusedModule] * 180 / Math.PI);
							var camDelta:Number = Math.abs(_camera.rotationX + _moduleAnchors[key] * 180 / Math.PI);
							trace(camDelta + " " + currentDelta);
							if(camDelta < currentDelta) {
								trace("new active is " + key);
								_focusedModule = key as TouchUI;
								break;
							}
						}
					}
					
					var c:Number = _camera.rotationX + (event.delta.y / 20);
					_camera.rotationX = c;
					_camera.z = -5000 * Math.cos(c * Math.PI / 180);
					_camera.y = 5000 * Math.sin(c * Math.PI / 180);
				}
				
				if(event.type == GestureEvent.SWIPE_END) {
					this.addEventListener(Event.ENTER_FRAME, onResetCamera);
				}
				*/
			}
			
			private function onResetCamera(event:Event):void {
				var currentDelta:Number = Math.abs(_camera.rotationX - _moduleAnchors[_focusedModule] * 180 / Math.PI);
				var c:Number;
				
				if(currentDelta < .1) {
					c = _moduleAnchors[_focusedModule] * 180 / Math.PI;
					this.removeEventListener(Event.ENTER_FRAME, onResetCamera);
				} else {
					c = _camera.rotationX + currentDelta / 10;
				}
				
				_camera.rotationX = c;
				_camera.z = -5000 * Math.cos(c * Math.PI / 180);
				_camera.y = 5000 * Math.sin(c * Math.PI / 180);
			}
			
			// ____________________________________________ Demos
			
			/************************
			 *     CREATOR DEMO     *
			 ************************/
			private var creatorUI:CreatorUI;
			public function initCreatorDemo(event:Event = null):void {
				creatorUI = new CreatorUI(_partyData.creators);
				_scene.addChild(creatorUI);
				
			}
			
			/**********************
			 *     EVENT DEMO     *
			 **********************/
			private var eventUI:EventUI;
			public function initEventDemo(event:Event = null):void {
				eventUI = new EventUI(_partyData);
				_scene.addChild(eventUI);
				eventUI.y = 100;
				eventUI.z = 1300;
				eventUI.rotationY = -200;
				
				
				this.stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				this.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			private var lastMouseX:Number = 0;
			
			private function onMouseDown(event:Event = null):void {
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				lastMouseX = this.stage.mouseX;
			}
			
			private function onMouseMove(event:Event = null):void {
				var minDeg:Number = 100;
				var maxDeg:Number = 140;
				var mouseX:Number = this.stage.mouseX;
				var delta:int = mouseX - lastMouseX;
				lastMouseX = mouseX;
				
				eventUI.yaw(- delta / 30);
				eventUI.rotationY = Math.max(40, Math.min(80, eventUI.rotationY));
			}
			
			private function onMouseUp(event:Event = null):void {
				this.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas id="clickMatte" backgroundColor="0xffffff" width="100%" height="100%" />
	<mx:UIComponent id="backUI" width="100%" height="100%" opaqueBackground="0xffffff"/>
	<mx:UIComponent id="frontUI" width="100%" height="100%" />
	
	<mx:Button label="Toggle your screen" right="10" bottom = "10" click="this.toggleFullscreen()"/>
	
	<mx:TitleWindow horizontalCenter="0" verticalCenter="0" title="Pick your server poison" id="initWindow">
		<mx:Button label="Run Screen from Localhost" click="init()"/>
		<mx:Button label="Run Screen from Production Server" click="init(false)" />
	</mx:TitleWindow>
	
	
	
</mx:WindowedApplication>
