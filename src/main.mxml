<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Creators Project" backgroundColor="0xffffff" width="1024" height="768"
	applicationComplete="go()" xmlns:textures="com.creatorsproject.ui.textures.*">

	<mx:Script>
		<![CDATA[
			import com.creatorsproject.input.TouchController;
			import com.creatorsproject.ui.CreatorUI;
			import com.creatorsproject.ui.ScheduleMarker;
			import com.creatorsproject.ui.textures.TextTexture;
			import org.papervision3d.materials.MovieMaterial;
			import com.creatorsproject.ui.textures.TextTexture;
			import org.papervision3d.objects.DisplayObject3D;
			import com.creatorsproject.geom.TileBand;
			import org.papervision3d.core.geom.renderables.Vertex3D;
			import com.creatorsproject.ui.EventUI;
			import com.creatorsproject.data.PartyData;
			import com.creatorsproject.data.EventRoom;
			import com.creatorsproject.data.ScheduleEvent;
			import com.creatorsproject.ui.ITickable;
			import org.papervision3d.materials.utils.MaterialsList;
			import org.papervision3d.materials.ColorMaterial;
			import org.papervision3d.objects.primitives.Cube;
			import org.papervision3d.cameras.Camera3D;
			import org.papervision3d.scenes.Scene3D;
			import org.papervision3d.render.BasicRenderEngine;
			import org.papervision3d.view.Viewport3D;
			
			public static const URL_SERVER:String = "http://localhost:8000/";
			public static const URL_SCHEDULE:String = "api/schedule";
			public static const URL_CREATOR:String = "api/creator";
			public static const URL_ROOM:String = "api/room";
			public static const URL_FLOOR:String = "api/floor";
			
			// Singletoning!
			public static var instance:main;
		
			// 3D!
			private var _viewport:Viewport3D;
			private var _renderer:BasicRenderEngine;
			private var _scene:Scene3D;
			private var _camera:Camera3D;
			
			// Interaction!
			private var _touchController:TouchController;
			
			// Data!
			private var _partyData:PartyData;
			
			// ____________________________________________ Application Setup
			
			public function go():void {
				instance = this;
				this.initData();
				this.init3D();
				this.initTouch();
			}
			
			public function initData():void {
				_partyData = new PartyData();
				_partyData.loadData();
				
				_partyData.addEventListener(Event.COMPLETE, this.initEventDemo);
			}
			
			public function init3D():void {
				_viewport = new Viewport3D(0, 0, true, true);
				_renderer = new BasicRenderEngine();
				_scene = new Scene3D();
				_camera = new Camera3D();
				
				this.backUI.addChild(_viewport);
				
				this.addEventListener(Event.ENTER_FRAME, this.onRenderTick); 
			}
			
			public function initTouch():void {
				_touchController = new TouchController(this.stage);
			}
			
			// ____________________________________________ Rendering and Updating
			
			public function onRenderTick(event:Event):void {
				
				for each(var t:DisplayObject3D in _scene.children) {
					if(t is ITickable) {
						(t as ITickable).tick();
					}
				}
				
				_renderer.renderScene(_scene, _camera, _viewport);
			}
			
			public function toggleFullscreen():void {
				if(stage.displayState == StageDisplayState.NORMAL) {
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				} else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			// ____________________________________________ Demos
			
			/************************
			 *     CREATOR DEMO     *
			 ************************/
			private var creatorUI:CreatorUI;
			public function initCreatorDemo(event:Event = null):void {
				creatorUI = new CreatorUI(_partyData.creators);
				_scene.addChild(creatorUI);
				
			}
			
			/**********************
			 *     EVENT DEMO     *
			 **********************/
			private var eventUI:EventUI;
			public function initEventDemo(event:Event = null):void {
				eventUI = new EventUI(_partyData);
				_scene.addChild(eventUI);
				eventUI.y = 100;
				eventUI.z = 1300;
				eventUI.rotationY = -200;
				
				
				this.stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				this.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			private var lastMouseX:Number = 0;
			
			private function onMouseDown(event:Event = null):void {
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				lastMouseX = this.stage.mouseX;
			}
			
			private function onMouseMove(event:Event = null):void {
				var minDeg:Number = 100;
				var maxDeg:Number = 140;
				var mouseX:Number = this.stage.mouseX;
				var delta:int = mouseX - lastMouseX;
				lastMouseX = mouseX;
				
				eventUI.yaw(- delta / 30);
				eventUI.rotationY = Math.max(40, Math.min(80, eventUI.rotationY));
			}
			
			private function onMouseUp(event:Event = null):void {
				this.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas id="clickMatte" backgroundColor="0xffffff" width="100%" height="100%" />
	<mx:UIComponent id="backUI" width="100%" height="100%" opaqueBackground="0xffffff"/>
	<mx:UIComponent id="frontUI" width="100%" height="100%" />
	
	<mx:Button label="Toggle your screen" right="10" bottom = "10" click="this.toggleFullscreen()"/>
</mx:WindowedApplication>
