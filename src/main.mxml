<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Creators Project" backgroundColor="0xffffff"
	applicationComplete="go()">

	<mx:Script>
		<![CDATA[
			import org.papervision3d.objects.DisplayObject3D;
			import com.creatorsproject.geom.TileBand;
			import org.papervision3d.core.geom.renderables.Vertex3D;
			import com.creatorsproject.ui.EventUI;
			import com.creatorsproject.data.Schedule;
			import com.creatorsproject.data.EventRoom;
			import com.creatorsproject.data.ScheduleEvent;
			import com.creatorsproject.ui.ITickable;
			import org.papervision3d.materials.utils.MaterialsList;
			import org.papervision3d.materials.ColorMaterial;
			import org.papervision3d.objects.primitives.Cube;
			import org.papervision3d.cameras.Camera3D;
			import org.papervision3d.scenes.Scene3D;
			import org.papervision3d.render.BasicRenderEngine;
			import org.papervision3d.view.Viewport3D;
			
			public static const URL_SERVER:String = "http://localhost:8000/";
			public static const URL_SCHEDULE:String = "api/schedule";
			public static const URL_CREATOR:String = "api/creator";
			public static const URL_ROOM:String = "api/room";
			public static const URL_FLOOR:String = "api/floor";
		
			// 3D!
			private var _viewport:Viewport3D;
			private var _renderer:BasicRenderEngine;
			private var _scene:Scene3D;
			private var _camera:Camera3D;
			
			// Data!
			private var _schedule:Schedule;
			
			public function go():void {
				this.initData();
				this.init3D();
			}
			
			public function initData():void {
				_schedule = new Schedule();
				_schedule.requestSchedule();
				
				_schedule.addEventListener(Event.COMPLETE, this.initEventDemo);
			}
			
			public function init3D():void {
				_viewport = new Viewport3D(0, 0, true, true);
				_renderer = new BasicRenderEngine();
				_scene = new Scene3D();
				_camera = new Camera3D();
				
				this.paperBuffer.addChild(_viewport);
				
				
				this.addEventListener(Event.ENTER_FRAME, this.onRenderTick); 
			}
			
			public function onRenderTick(event:Event):void {
				
				for each(var t:DisplayObject3D in _scene.children) {
					if(t is ITickable) {
						(t as ITickable).tick();
					}
				}
				
				
				_renderer.renderScene(_scene, _camera, _viewport);
			}
			
			public function toggleFullscreen():void {
				if(stage.displayState == StageDisplayState.NORMAL) {
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				} else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			/**********************
			 *     EVENT DEMO     *
			 **********************/
			public function initEventDemo(event:Event = null):void {
				var eventUI:EventUI = new EventUI(_schedule);
				_scene.addChild(eventUI);
				
				var mat = new ColorMaterial();
				var curve = [new Vertex3D(0, 0, 0), new Vertex3D(100, 0, 0), new Vertex3D(100, 0, -100), new Vertex3D(200, 0, -100)];
				var tile:TileBand = new TileBand(mat, curve);
				tile.pitch(-33);
				tile.yaw(-33);
				_scene.addChild(tile);
			}
		]]>
	</mx:Script>
	
	<mx:UIComponent id="paperBuffer" width="100%" height="100%" opaqueBackground="0xffffff"/>
	<mx:Button label="Toggle your screen" right="10" bottom = "10" click="this.toggleFullscreen()"/>
</mx:WindowedApplication>
