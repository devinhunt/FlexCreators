<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Creators Project" backgroundColor="0xffffff" width="1360" height="768"
	xmlns:textures="com.creatorsproject.ui.textures.*" xmlns:chips="com.creatorsproject.ui.chips.*">

	<mx:Script>
		<![CDATA[
			import com.creatorsproject.ui.MapUI;
			import com.creatorsproject.data.DataConstants;
			import com.creatorsproject.ui.TouchUI;
			import org.papervision3d.core.math.Number3D;
			import com.creatorsproject.input.events.GestureEvent;
			import com.creatorsproject.input.TouchController;
			import com.creatorsproject.ui.CreatorUI;
			import com.creatorsproject.ui.ScheduleMarker;
			import org.papervision3d.materials.MovieMaterial;
			import org.papervision3d.objects.DisplayObject3D;
			import com.creatorsproject.geom.TileBand;
			import org.papervision3d.core.geom.renderables.Vertex3D;
			import com.creatorsproject.ui.EventUI;
			import com.creatorsproject.data.PartyData;
			import com.creatorsproject.data.EventRoom;
			import com.creatorsproject.data.PartyEvent;
			import com.creatorsproject.ui.ITickable;
			import org.papervision3d.materials.utils.MaterialsList;
			import org.papervision3d.materials.ColorMaterial;
			import org.papervision3d.objects.primitives.Cube;
			import org.papervision3d.cameras.Camera3D;
			import org.papervision3d.scenes.Scene3D;
			import org.papervision3d.render.BasicRenderEngine;
			import org.papervision3d.view.Viewport3D;
			
			// Singletoning!
			public static var instance:main;
		
			// 3D!
			private var _viewport:Viewport3D;
			private var _renderer:BasicRenderEngine;
			private var _scene:Scene3D;
			private var _camera:Camera3D;
			
			// Interaction!
			private var _touchController:TouchController;
			private var _moduleAnchors:Dictionary;
			private var _focusedModule:TouchUI;
			
			// Data!
			private var _partyData:PartyData;
			
			// Interface!
			public static var EVENT_NODE:String = "eventNode";
			public static var CREATOR_NODE:String = "creatorNode";
			public static var MAP_NODE:String = "mapNode";
			private var _eventUI:EventUI;
			private var _creatorUI:CreatorUI;
			private var _mapUI:MapUI;
			
			private var _camMax:Number;
			private var _camMin:Number;
			private var _camTarget:Number;
			
			// ____________________________________________ Application Setup
			
			public function init(isLocal:Boolean = true):void {
				DataConstants.isLocal = isLocal
				initWindow.visible = false;
				initSever();
				
				//animationTest();
			}
			
			private function animationTest():void {
				this.init3D();
				
				var cube:Cube = new Cube(new MaterialsList({all: new ColorMaterial()}), 100, 100, 100);
				_scene.addChild(cube);
			}
			
			public function initSever():void {
				instance = this;
				_partyData = new PartyData();
				_partyData.loadData();
				_partyData.addEventListener(Event.COMPLETE, this.onDataSuccess);
				_partyData.addEventListener(IOErrorEvent.IO_ERROR, this.onPartyDataError);
			}
			
			public function onPartyDataError(event:IOErrorEvent):void {
				
			}
			
			public function onDataSuccess(event:Event):void {
				this.initTouch();
				this.init3D();
				this.initInterface();
			}
			
			public function init3D():void {
				_viewport = new Viewport3D(0, 0, true, true);
				_renderer = new BasicRenderEngine();
				_scene = new Scene3D();
				_camera = new Camera3D(50);
				
				this.backUI.addChild(_viewport);
				this.addEventListener(Event.ENTER_FRAME, this.onRenderTick); 
			}
			
			public function initTouch():void {
				TouchController.me.setup(this.stage, this.clickMatte);
				TouchController.me.addEventListener(GestureEvent.SWIPE_START, onSwipe);
				TouchController.me.addEventListener(GestureEvent.SWIPE, onSwipe);
				TouchController.me.addEventListener(GestureEvent.SWIPE_END, onSwipe);
			}
			
			public function initInterface(event:Event = null):void {
				
				_mapUI = new MapUI(_partyData);
				_scene.addChild(_mapUI);
				setUIPosition(_mapUI, 20);
				
				_creatorUI = new CreatorUI(_partyData);
				_scene.addChild(_creatorUI);
				setUIPosition(_creatorUI, 0);
				
				_eventUI = new EventUI(_partyData);
				_scene.addChild(_eventUI);
				setUIPosition(_eventUI, -20);
				
				_camMax = 30;
				_camMin = -30;
				
				// finally, get the camera into place
				_camera.z = -5000;
			}
			
			private function dump():void {
				var step:Number = Math.PI / 20;
				var mat:ColorMaterial = new ColorMaterial();
				for(var i:int = 0; i < 40; i ++) {
					var cube:Cube = new Cube(new MaterialsList({all: mat}), 50, 50, 50);
					cube.z = -2000 * Math.cos(step * i);
					cube.y = -2000 * Math.sin(step * i);
					_scene.addChild(cube);
				}
			}
			
			private function setUIPosition(ui:DisplayObject3D, theta:Number):void {
				var thetaRad:Number = theta * Math.PI / 180;
				
				ui.z = -2000 * Math.cos(thetaRad);
				ui.y = -2000 * Math.sin(thetaRad);
				
				ui.rotationX = -theta;
			}
			
			// ____________________________________________ Rendering and Updating
			
			public function onRenderTick(event:Event):void {
				for each(var t:DisplayObject3D in _scene.children) {
					if(t is ITickable) {
						(t as ITickable).tick();
					}
				}
				_renderer.renderScene(_scene, _camera, _viewport);
			}
			
			public function toggleFullscreen():void {
				if(stage.displayState == StageDisplayState.NORMAL) {
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
					this.showStatusBar = false;
				} else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			// ____________________________________________ Interaction
			
			private function onSwipe(event:GestureEvent):void {
				
				if(event.type == GestureEvent.SWIPE_START) {
					this.removeEventListener(Event.ENTER_FRAME, onResetCamera);
				}
				
				if(event.type == GestureEvent.SWIPE) {
					var c:Number = _camera.rotationX + (event.delta.y / 20);
					
					var eventDelta:Number = Math.abs(_eventUI.rotationX - c);
					var creatorDelta:Number = Math.abs(_creatorUI.rotationX - c);
					var mapDelta:Number = Math.abs(_mapUI.rotationX - c);
					
					if(mapDelta == Math.min(mapDelta, eventDelta, creatorDelta)) {
						_camTarget = -20;
					} else if(creatorDelta == Math.min(mapDelta, eventDelta, creatorDelta)) {
						_camTarget = 0;
					} else {
						_camTarget = 20;
					}
					
					this.setCamLocation(c);
				}
				
				if(event.type == GestureEvent.SWIPE_END) {
					this.addEventListener(Event.ENTER_FRAME, onResetCamera);
				}
			}
			
			private function onResetCamera(event:Event):void {
				if(Math.abs(_camTarget - _camera.rotationX) < .1) {
					this.setCamLocation(_camTarget);
					this.removeEventListener(Event.ENTER_FRAME, onResetCamera);
				} else {
					var c:Number = _camera.rotationX + (_camTarget - _camera.rotationX) / 5;
					this.setCamLocation(c);
				}
			}
			
			private function setCamLocation(theta:Number):void {
				_camera.rotationX = theta;
				_camera.z = -5000 * Math.cos(theta * Math.PI / 180);
				_camera.y = 5000 * Math.sin(theta * Math.PI / 180);
			}
			
			// ____________________________________________ Demos
		]]>
	</mx:Script>
	
	<mx:Canvas id="clickMatte" backgroundColor="0xffffff" width="100%" height="100%" />
	<mx:UIComponent id="backUI" width="100%" height="100%" opaqueBackground="0xffffff"/>
	<mx:UIComponent id="frontUI" width="100%" height="100%" />
	
	<mx:Button label="Toggle your screen" right="10" bottom = "10" click="this.toggleFullscreen()"/>
	
	<mx:TitleWindow horizontalCenter="0" verticalCenter="0" title="Pick your server poison" id="initWindow">
		<mx:Button label="Run Screen from Localhost" click="init()"/>
		<mx:Button label="Run Screen from Production Server" click="init(false)" />
	</mx:TitleWindow>
	
	
	
</mx:WindowedApplication>
